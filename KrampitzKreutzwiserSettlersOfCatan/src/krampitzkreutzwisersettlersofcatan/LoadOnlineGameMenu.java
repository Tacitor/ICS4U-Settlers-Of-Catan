/*
 * Lukas Krampitz
 * Mar 25 2021
 * Allow the user to select settings that are constant across all games.
 */
package krampitzkreutzwisersettlersofcatan;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import textures.ImageRef;

/**
 *
 * @author Tacitor
 * @author Evan
 */
public class LoadOnlineGameMenu extends javax.swing.JFrame {

    private final MainMenu mainMenuFrame;
    private CatanServer server;
    private CatanClient client;
    private int failCounter; //keeps track of how many failed connection attempts there have been
    private int portNum;

    /**
     * Creates new form CreditsUI
     *
     * @param m The main menu JFrame this returns to on exit
     */
    public LoadOnlineGameMenu(MainMenu m) {
        setIcon();

        initComponents();

        this.setLocationRelativeTo(null);

        mainMenuFrame = m;

        //no failed attempts yet
        failCounter = 0;

    }

    /**
     * Set the icon for the JFRame
     */
    private void setIcon() {
        this.setIconImage(ImageRef.ICON);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colourSelectBtnGrp = new javax.swing.ButtonGroup();
        backBtn = new javax.swing.JButton();
        createBtn = new javax.swing.JButton();
        titleLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        portTxtFld = new javax.swing.JTextField();
        portLbl = new javax.swing.JLabel();
        colourSelectLbl = new javax.swing.JLabel();
        colourRedRbtn = new javax.swing.JRadioButton();
        colourBlueRbtn = new javax.swing.JRadioButton();
        colourOrangeRbtn = new javax.swing.JRadioButton();
        colourWhiteRbtn = new javax.swing.JRadioButton();
        requestColourBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        backBtn.setText("< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        createBtn.setFont(new java.awt.Font("MV Boli", 0, 16)); // NOI18N
        createBtn.setText("Create Server");
        createBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBtnActionPerformed(evt);
            }
        });

        titleLbl.setFont(new java.awt.Font("MV Boli", 0, 24)); // NOI18N
        titleLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLbl.setText("Load to Online Game Server");

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Test Here\n");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setEnabled(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        portTxtFld.setText("25570");
        portTxtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portTxtFldActionPerformed(evt);
            }
        });

        portLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        portLbl.setText("Connection port (recomened 25570):");

        colourSelectLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        colourSelectLbl.setText("Select the colour you would like to play as:");

        colourSelectBtnGrp.add(colourRedRbtn);
        colourRedRbtn.setSelected(true);
        colourRedRbtn.setText("Red");
        colourRedRbtn.setEnabled(false);
        colourRedRbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colourRedRbtnActionPerformed(evt);
            }
        });

        colourSelectBtnGrp.add(colourBlueRbtn);
        colourBlueRbtn.setText("Blue");
        colourBlueRbtn.setEnabled(false);

        colourSelectBtnGrp.add(colourOrangeRbtn);
        colourOrangeRbtn.setText("Orange");
        colourOrangeRbtn.setEnabled(false);

        colourSelectBtnGrp.add(colourWhiteRbtn);
        colourWhiteRbtn.setText("White");
        colourWhiteRbtn.setEnabled(false);

        requestColourBtn.setFont(new java.awt.Font("MV Boli", 0, 16)); // NOI18N
        requestColourBtn.setText("Request Colour");
        requestColourBtn.setEnabled(false);
        requestColourBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestColourBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(colourSelectLbl)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(colourRedRbtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(colourBlueRbtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(colourOrangeRbtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(colourWhiteRbtn))
                            .addComponent(backBtn)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(portTxtFld, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(portLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(createBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(requestColourBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(titleLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(portLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portTxtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(colourSelectLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(colourRedRbtn)
                            .addComponent(colourBlueRbtn)
                            .addComponent(colourOrangeRbtn)
                            .addComponent(colourWhiteRbtn))
                        .addGap(18, 18, 18)
                        .addComponent(backBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(createBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(requestColourBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * The event for when the back button is pressed. Returns to the main menu.
     *
     * @param evt The event generated by the button click (Unused)
     */
    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // Hide this window and show the main menu
        this.setVisible(false);
        mainMenuFrame.setVisible(true);
    }//GEN-LAST:event_backBtnActionPerformed

    private void createBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBtnActionPerformed

        createBtn.setText("Connecting...");

        boolean validInput = false;
        String input = portTxtFld.getText();

        //make sure the input is good
        //if a blank feild
        if (!input.equals("")) {

            //if the feild is not blank check if it's and integer
            try {
                int portNum = Integer.parseInt(input);

                //make sure no important ports
                if (portNum != 80 && portNum != 443) {

                    this.portNum = portNum;

                    //=-=-=-=-=-=-=-=-=Save file Start=-=-=-=-=-=-=-=-=
                    JFileChooser saveFileLoader = new JFileChooser(); //make a new file chooser

                    //create a filter for catan save files
                    FileFilter catanSaveFile = new FileFilter() {
                        //add the description
                        @Override
                        public String getDescription() {
                            return "Catan Save File (*.catan)";
                        }

                        //add the logic for the filter
                        @Override
                        public boolean accept(File f) {
                            //if it's a directory ignor it
                            if (f.isDirectory()) {
                                return true;
                            } else { //if it's a file only show it if it's a .catan file
                                return f.getName().toLowerCase().endsWith(".catan");
                            }
                        }
                    };

                    //set up the file choose and call it
                    saveFileLoader.setDialogTitle("Select a Save File to Open:");
                    saveFileLoader.addChoosableFileFilter(catanSaveFile);
                    saveFileLoader.setFileFilter(catanSaveFile);
                    int userLoadSelection = saveFileLoader.showOpenDialog(this);

                    //check if the user selected a file
                    if (userLoadSelection == JFileChooser.APPROVE_OPTION) {

                        //test if it is a vailid save file
                        try {
                            File savefile = new File(saveFileLoader.getSelectedFile().getPath());
                            Scanner scanner = new Scanner(savefile);

                            //reset the game
                            mainMenuFrame.getGameFrame().resetGamePanel();

                            //check if it is a vailid game save
                            if (!scanner.nextLine().equals("SettlersOfCatanSave" + Catan.SAVE_FILE_VER)) {
                                JOptionPane.showMessageDialog(null, "The selected file is not a Settlers of Catan " + Catan.SAVE_FILE_VER + " save file.", "Loading Error", JOptionPane.ERROR_MESSAGE);
                                createBtn.setText("Create Server");
                            } else { //if it is a real save file
                                //check if the next line hold the player count
                                if (scanner.nextLine().equals("playerCount:")) {
                                    //set the player count
                                    GamePanel.setPlayerCount(Integer.parseInt(scanner.nextLine()));
                                    mainMenuFrame.getGameFrame().resetGamePanel();

                                    mainMenuFrame.getGameFrame().loadFromFile(saveFileLoader.getSelectedFile().getPath());

                                } else {
                                    JOptionPane.showMessageDialog(null, "The selected file does not contain the required player count data.", "Loading Error", JOptionPane.ERROR_MESSAGE);
                                    createBtn.setText("Create Server");
                                }
                            }

                        } catch (FileNotFoundException e) {
                            JOptionPane.showMessageDialog(null, "There was an error loading the save file:\n" + e, "Loading Error", JOptionPane.ERROR_MESSAGE);
                            createBtn.setText("Create Server");
                        }

                    } else { //if there was so file selected
                        JOptionPane.showMessageDialog(null, "There was no file selected.", "Loading Error", JOptionPane.ERROR_MESSAGE);
                        createBtn.setText("Create Server");
                    }

                    //=-=-=-=-=-=-=-=-=Save file End=-=-=-=-=-=-=-=-=
                    //disable the connection button
                    createBtn.setEnabled(false);

                    //run the server and client setup
                    runSetup();
                } else {
                    createBtn.setText("No HTTP port! Try again");
                }

            } catch (NumberFormatException e) {
                createBtn.setText("No port num! Try again");
            }

        } else {
            createBtn.setText("Must have port Num! Try again");
        }

    }//GEN-LAST:event_createBtnActionPerformed

    private void portTxtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portTxtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portTxtFldActionPerformed

    private void requestColourBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestColourBtnActionPerformed
        requestColourBtn.setText("Requesting...");

        int colourRequest; //store the colour to request

        //get the colour the user wants
        if (colourRedRbtn.isSelected()) {
            colourRequest = 1; //request red
        } else if (colourBlueRbtn.isSelected()) {
            colourRequest = 2; //request blue
        } else if (colourOrangeRbtn.isSelected()) {
            colourRequest = 3; //request orange
        } else if (colourWhiteRbtn.isSelected()) {
            colourRequest = 4; //request white
        } else {
            colourRequest = 0; //default to what every the server want to give me
        }

        //request the player colour
        client.requestColour(colourRequest); //request any colour

        //System.out.println("coluour: " + client.getClientColour());
        //wait for the response to come through
        while (client.getClientColour() == 0) {
            try {
                //while there is no assinged colour do nothing and just wait
                //System.out.println("coluour still: " + client.getClientColour());
                Thread.sleep(200);
            } catch (InterruptedException ex) {
                System.out.println("Error requesing colour in JoinOnlineGameMenu");
            }
        }

        //if the colour request was successfule tell the game
        if (client.getClientColour() == colourRequest) {

            //once the client has been set up save it to the game panel
            GamePanel.setOnlineMode(client.getClientColour());

            requestColourBtn.setText("Done");
            requestColourBtn.setEnabled(false);
        } else { //the the user that it failed
            requestColourBtn.setText("Not available. Try Again");
        }
    }//GEN-LAST:event_requestColourBtnActionPerformed

    private void colourRedRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colourRedRbtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_colourRedRbtnActionPerformed

    /**
     * Sets everything up for other player to join over a network
     */
    public void runSetup() {
        serverStartUp();
        createFirstClient();

        //enable all the colour buttons
        colourBlueRbtn.setEnabled(true);
        colourOrangeRbtn.setEnabled(true);
        colourRedRbtn.setEnabled(true);
        colourWhiteRbtn.setEnabled(true);
        requestColourBtn.setEnabled(true);
    }

    /**
     * Create the local server
     */
    private void serverStartUp() {
        server = new CatanServer(GamePanel.getPlayerCount(), portNum);

        //create a new thread for the server
        Thread t = new Thread(() -> {
            server.acceptConnections();
        });

        //start running the server
        t.start();
    }

    /**
     * Creates a client to connect to the local server
     */
    private void createFirstClient() {
        //create the new client and request to be the red player
        client = new CatanClient(700, 200, "localhost", mainMenuFrame.getGameFrame(), portNum);
        client.connectToServer();
        client.setUpGUI();
        client.setUpButton();

        //pass the client to the game panel
        GamePanel.setCatanClient(client);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JRadioButton colourBlueRbtn;
    private javax.swing.JRadioButton colourOrangeRbtn;
    private javax.swing.JRadioButton colourRedRbtn;
    private javax.swing.ButtonGroup colourSelectBtnGrp;
    private javax.swing.JLabel colourSelectLbl;
    private javax.swing.JRadioButton colourWhiteRbtn;
    private javax.swing.JButton createBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel portLbl;
    private javax.swing.JTextField portTxtFld;
    private javax.swing.JButton requestColourBtn;
    private javax.swing.JLabel titleLbl;
    // End of variables declaration//GEN-END:variables

}
